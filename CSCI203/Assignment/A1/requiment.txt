1. Read the text file 
2. Discarding punctuation of each word
3. Convert all words into lowercase
4. Store a count of each word
5. Sort words in the decreasing order (multiple words with same count, sort them in alphabetically)
6. Print
    - First ten most common appearance 
    - Last ten have least words
    - The total of unique words

(*) Build the structure of program:
- Create Binary Search Tree (Node -> data)
- Add node to tree with given words (check node -> [left],[right]
    -> Therefore, if words have the same length and the same in word, set count++
- Insert node with given words, by check if the word is null or not
- Sorting words in decreasing order
- Display in 3 ouputs [(1 to 10) top to bottom, bottom back to top, total of unique words]

Sorting algorithms:
(1)Merge sort: 

// Traverses the BST and collects all nodes into a list
        public List<Node> collectNodesToList() {
            List<Node> nodeList = new ArrayList<>();
            collectNodesRec(root, nodeList);
            return nodeList;
        }
    
        private void collectNodesRec(Node node, List<Node> nodeList) {
            if (node != null) {
                nodeList.add(node);
                collectNodesRec(node.left, nodeList);
                collectNodesRec(node.right, nodeList);
            }
        }

// Merge Sort functions
        public void mergeSort(List<Node> nodeList) {
            if (nodeList.size() > 1) {
                int mid = nodeList.size() / 2;
    
                List<Node> left = new ArrayList<>(nodeList.subList(0, mid));
                List<Node> right = new ArrayList<>(nodeList.subList(mid, nodeList.size()));
    
                mergeSort(left);
                mergeSort(right);
    
                merge(nodeList, left, right);
            }
        }
    
        private void merge(List<Node> nodeList, List<Node> left, List<Node> right) {
            int i = 0, j = 0, k = 0;
    
            while (i < left.size() && j < right.size()) {
                if (left.get(i).count > right.get(j).count) {
                    nodeList.set(k++, left.get(i++));
                } else {
                    nodeList.set(k++, right.get(j++));
                }
            }
    
            while (i < left.size()) {
                nodeList.set(k++, left.get(i++));
            }
    
            while (j < right.size()) {
                nodeList.set(k++, right.get(j++));
            }
        }
    
        // Displays words based on counter
        public void displayByCounter() {
            List<Node> nodeList = collectNodesToList();
            mergeSort(nodeList);
            for (Node node : nodeList) {
                System.out.printf("%-10s: %d%n", node.data, node.count);
            }
        }

(.) Calling the method with completed tree: 
        //BinaryTree.displayByCounter();

    
Report:

(1): A high‚Äêlevel description (in pseudo code) of the overall solution strategy.
My own program initially read the file word by word with all lowercase keys and punctutaion removing by using 
functions with parameters: "String lowerCase(String word)" and "removePunctuation(String word)"  